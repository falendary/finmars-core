files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/run_supervised_celeryd.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # Get django environment variables
      celeryenv=`cat /opt/python/current/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PATH/%(ENV_PATH)s/g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g'`
      celeryenv=${celeryenv%?}

      # Create celery configuraiton script (default queue)
      celeryconf1="[program:celeryd1]
      ; Set full path to celery program if using virtualenv
      command=/opt/python/run/venv/bin/celery worker -A poms_app --loglevel=DEBUG --pidfile=/tmp/celery-1.pid

      directory=/opt/python/current/app
      user=nobody
      numprocs=1
      stdout_logfile=/var/log/celery-worker-1.log
      stderr_logfile=/var/log/celery-worker-1.log
      stdout_logfile_maxbytes=10MB
      stdout_logfile_backups=10
      stderr_logfile_maxbytes=10MB
      stderr_logfile_backups=10
      autostart=true
      autorestart=true
      startsecs=10

      ; Need to wait for currently executing tasks to finish at shutdown.
      ; Increase this if you have very long running tasks.
      stopwaitsecs = 600

      ; When resorting to send SIGKILL to the program to terminate it
      ; send SIGKILL to its whole process group instead,
      ; taking care of its children as well.
      killasgroup=true

      ; if rabbitmq is supervised, set its priority higher
      ; so it starts first
      priority=998

      environment=$celeryenv"

      # Create the celery supervisord conf script
      echo "$celeryconf1" | tee /opt/python/etc/celery1.conf

      # Add configuration script to supervisord conf (if not there already)
      if ! grep -Fxq "[include]" /opt/python/etc/supervisord.conf
          then
          echo "[include]" | tee -a /opt/python/etc/supervisord.conf
          echo "files: celery1.conf" | tee -a /opt/python/etc/supervisord.conf
      fi

      # Reread the supervisord config
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf reread

      # Update supervisord in cache without restarting all services
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf update

      # Start/Restart celeryd through supervisord
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart celeryd1

  "/tmp/celerybeat.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # Get django environment variables
      celeryenv=`cat /opt/python/current/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PATH/%(ENV_PATH)s/g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g'`
      celeryenv=${celeryenv%?}

      # Create celery configuraiton script
      celeryconf="[program:celerybeat]
      ; Set full path to celery program if using virtualenv
      command=/opt/python/run/venv/bin/celery beat -A poms_app -s /tmp/celerybeat-schedule --loglevel=DEBUG --pidfile=/tmp/celerybeat.pid

      directory=/opt/python/current/app
      user=nobody
      numprocs=1
      stdout_logfile=/var/log/celery-beat.log
      stderr_logfile=/var/log/celery-beat.log
      stdout_logfile_maxbytes=10MB
      stdout_logfile_backups=10
      stderr_logfile_maxbytes=10MB
      stderr_logfile_backups=10
      autostart=true
      autorestart=true
      startsecs=10

      ; Need to wait for currently executing tasks to finish at shutdown.
      ; Increase this if you have very long running tasks.
      stopwaitsecs = 600

      ; When resorting to send SIGKILL to the program to terminate it
      ; send SIGKILL to its whole process group instead,
      ; taking care of its children as well.
      killasgroup=true

      ; if rabbitmq is supervised, set its priority higher
      ; so it starts first
      priority=998

      environment=$celeryenv"

      # Create the celery supervisord conf script
      echo "$celeryconf" | tee /opt/python/etc/celerybeat.conf

      # Add configuration script to supervisord conf (if not there already)
      if ! grep -Fxq "files: celery1.conf celerybeat.conf" /opt/python/etc/supervisord.conf
          then
          sed 's/files: celery1.conf/files: celery1.conf celerybeat.conf/g' /opt/python/etc/supervisord.conf > /opt/python/etc/supervisord2.conf
          mv -f /opt/python/etc/supervisord2.conf /opt/python/etc/supervisord.conf
      fi

      # Reread the supervisord config
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf reread

      # Update supervisord in cache without restarting all services
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf update

      # Start/Restart celerybeat through supervisord
      /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart celerybeat

container_commands:
  beat:
    command: "/tmp/celerybeat.sh"
    leader_only: true
