"""
Django settings for poms project.

Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

from __future__ import unicode_literals

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from rest_framework import ISO_8601

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jrixf-%65l5&#@hbmq()sa-pzy@e)=zpdr6g0cg8a!i_&w-c!)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str(os.environ.get('DJANGO_DEBUG', 'True')).lower() == 'true'
DEV = DEBUG or str(os.environ.get('POMS_DEV', 'True')).lower() == 'true'
ADMIN = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',

    # 'kombu.transport.django',
    # 'djcelery',

    'modeltranslation',
    'mptt',
    'reversion',  # really not used

    'poms.http_sessions',
    'poms.users',
    'poms.audit',
    'poms.notifications',
    'poms.obj_attrs',
    'poms.obj_perms',
    'poms.chats',
    'poms.ui',
    'poms.tags',
    'poms.accounts',
    'poms.counterparties',
    'poms.currencies',
    'poms.instruments',
    'poms.portfolios',
    'poms.strategies',
    'poms.transactions',
    'poms.integrations',
    'poms.reports',
    'poms.api',

    'django.contrib.admin',
    'django.contrib.admindocs',

    'django_extensions',
    'redisboard',

    # 'django_otp',
    # 'django_otp.plugins.otp_hotp',
    # 'django_otp.plugins.otp_totp',
    # 'django_otp.plugins.otp_email',
    # 'django_otp.plugins.otp_static',
]

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar', ]

MIDDLEWARE_CLASSES = [
    'poms.common.middleware.CommonMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    # 'poms.common.middleware.NoCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'poms.http_sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'poms.users.middleware.AuthenticationMiddleware',
    'poms.users.middleware.TimezoneMiddleware',
    # 'poms.users.middleware.LocaleMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'poms.notifications.middleware.NotificationMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'poms_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'poms_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('RDS_DB_NAME', None),
        'USER': os.environ.get('RDS_USERNAME', None),
        'PASSWORD': os.environ.get('RDS_PASSWORD', None),
        'HOST': os.environ.get('RDS_HOSTNAME', None),
        'PORT': os.environ.get('RDS_PORT', None),
        # 'ATOMIC_REQUESTS': True,
    }
}

if DEBUG:
    # DATABASES['default'] = {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'poms_dev2',
    #     'USER': 'poms_dev',
    #     'PASSWORD': 'sqlsql',
    #     'HOST': '192.168.57.2',
    #     'PORT': '',
    # }
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # 'NAME': ':memory:',
    }

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

if DEBUG:
    AUTH_PASSWORD_VALIDATORS = []

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en'
LANGUAGES = [
    ('en', 'English'),
    ('es', 'Spanish'),
    ('de', 'Deutsch'),
    ('ru', 'Russian'),
]

TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True
USE_TZ = True
USE_ETAGS = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/api/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

REDIS_HOST = os.environ.get('REDIS_HOST', None)

if REDIS_HOST:
    CACHE_SERIALIZER = "django_redis.serializers.json.JSONSerializer"
    CACHE_COMPRESSOR = 'django_redis.compressors.identity.IdentityCompressor'
    # CACHE_COMPRESSOR = 'django_redis.compressors.zlib.ZlibCompressor'
    CACHES = {
        'default': {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://%s/10" % REDIS_HOST,
            'KEY_PREFIX': 'fmbe_default',
            'TIMEOUT': 300,
            'OPTIONS': {
                'SERIALIZER': CACHE_SERIALIZER,
                'COMPRESSOR': CACHE_COMPRESSOR,
            }
        },
        'http_session': {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://%s/10" % REDIS_HOST,
            'KEY_PREFIX': 'fmbe_http_session',
            'TIMEOUT': 3600,
            'OPTIONS': {
                'SERIALIZER': CACHE_SERIALIZER,
                'COMPRESSOR': CACHE_COMPRESSOR,
            }
        },
        'throttling': {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://%s/10" % REDIS_HOST,
            'KEY_PREFIX': 'fmbe_throttling',
            'TIMEOUT': 60,
            'OPTIONS': {
                'SERIALIZER': CACHE_SERIALIZER,
                'COMPRESSOR': CACHE_COMPRESSOR,
            }
        },
        'bloomberg': {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://%s/10" % REDIS_HOST,
            'KEY_PREFIX': 'fmbe_bloomberg',
            'TIMEOUT': 3600,
            'OPTIONS': {
                'SERIALIZER': CACHE_SERIALIZER,
                'COMPRESSOR': CACHE_COMPRESSOR,
            }
        },
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'cache_default',
            'KEY_PREFIX': 'default',
        },
        'throttling': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'throttling',
            'KEY_PREFIX': 'throttling',
        },
        'bloomberg': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'cache_default',
            'KEY_PREFIX': 'bloomberg',
        },
    }

# SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
if 'http_session' in CACHES:
    SESSION_ENGINE = "poms.http_sessions.backends.cached_db"
    SESSION_CACHE_ALIAS = 'http_session'
else:
    SESSION_ENGINE = "poms.http_sessions.backends.db"

LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s %(process)d/%(thread)d %(module)s - %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            # 'filters': ['special']
        },
    },
    'loggers': {
        'py.warnings': {
            'handlers': ['console'],
        },
        'django': {
            'level': 'INFO',
            'handlers': ['console'],
        },
        # 'django.request': {
        #     'handlers': ['mail_admins'],
        #     'level': 'ERROR',
        #     'propagate': False,
        # },
        # 'django.db': {
        #     'level': 'DEBUG',
        # },
        'poms': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'celery': {
            'level': 'INFO',
            'handlers': ['console'],
        },
        'werkzeug': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': True,
        },
    }
}
if not DEBUG:
    LOGGING['loggers']['django.request'] = {
        'handlers': ['mail_admins'],
        'level': 'ERROR',
        'propagate': False,
    }

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'poms.common.pagination.PageNumberPaginationExt',
    'PAGE_SIZE': 20,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser',
    #     'rest_framework.parsers.MultiPartParser',
    # ),
    'DEFAULT_THROTTLE_CLASSES': (
        'poms.api.throttling.AnonRateThrottleExt',
        'poms.api.throttling.UserRateThrottleExt'
    ),
    'DEFAULT_THROTTLE_RATES': {
        # 'anon': '5/second',
        # 'user': '50/second',
        'anon': '100/hour',
        'user': '10000/hour',
    },

    # 'DATETIME_FORMAT': '%Y-%m-%dT%H:%M:%S %Z',
    # 'DATETIME_INPUT_FORMATS': (ISO_8601, '%c', '%Y-%m-%d %H:%M:%S %Z'),
}

if DEV:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] += (
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework.renderers.AdminRenderer',
    )

CURRENCY_CODE = 'USD'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    # 'poms.obj_perms.backends.PomsPermissionBackend',
)

# email config

DEFAULT_FROM_EMAIL = '"Finmars Notifications" <no-reply@finmars.com>'
SERVER_EMAIL = '"ADMIN: FinMars" <no-reply@finmars.com>'
EMAIL_HOST = os.environ.get('EMAIL_HOST', None)
EMAIL_PORT = int(os.environ.get('EMAIL_HOST', "587"))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', None)
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', None)
EMAIL_USE_TLS = True
EMAIL_TIMEOUT = 10

if DEBUG:
    DEFAULT_FROM_EMAIL = '"DEBUG: Finmars Notifications" <no-reply@finmars.com>'
    SERVER_EMAIL = '"DEBUG-ADMIN: FinMars" <no-reply@finmars.com>'
    ADMINS = MANAGERS = [
        ['ailyukhin', 'ailyukhin@vitaminsoft.ru'],
        ['alyakhov', 'alyakhov@vitaminsoft.ru'],
    ]
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    if DEV:
        DEFAULT_FROM_EMAIL = '"DEV: Finmars Notifications" <no-reply@finmars.com>'
        SERVER_EMAIL = '"DEV-ADMIN: FinMars" <no-reply@finmars.com>'
    ADMINS = [
        ['Site Admins', 'site-admins@finmars.com'],
    ]
    MANAGERS = [
        ['Site Managers', 'site-managers@finmars.com'],
    ]
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# MESSAGE_STORAGE = 'poms.notifications.message_storage.FallbackStorage'

GEOIP_PATH = os.path.join(BASE_DIR, 'poms')
GEOIP_COUNTRY = "GeoLite2-Country.mmdb"
GEOIP_CITY = "GeoLite2-City.mmdb"

MEDIA_ROOT = os.path.join(BASE_DIR, 'tmp', 'media')
MEDIA_URL = '/api/media/'
MEDIA_SERVE = True

FILE_IMPORT_STORAGE = {
    'BACKEND': 'django.core.files.storage.FileSystemStorage',
    'KWARGS': {
        'location': os.path.join(BASE_DIR, 'tmp', 'import'),
        'base_url': '/api/import/'
    }
}

# CELERY ------------------------------------------------


if REDIS_HOST:
    BROKER_URL = 'redis://%s/10' % REDIS_HOST
    CELERY_RESULT_BACKEND = 'redis://%s/10' % REDIS_HOST
else:
    # import djcelery
    #
    # djcelery.setup_loader()
    #
    BROKER_URL = 'django://'
    # # CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
    # # CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
    # KOMBU_POLLING_INTERVAL = 1
    # raise Exception('REDIS_HOST required!')

CELERY_ALWAYS_EAGER = True
CELERY_EAGER_PROPAGATES_EXCEPTIONS = True

CELERY_DEFAULT_QUEUE = 'poms_celery'
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = 'UTC'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERYD_CONCURRENCY = 1
# CELERYD_TASK_TIME_LIMIT = 1
CELERYD_HIJACK_ROOT_LOGGER = False
CELERY_REDIRECT_STDOUTS = False

CELERY_TRACK_STARTED = True
CELERY_SEND_EVENTS = True
CELERY_SEND_TASK_SENT_EVENT = True

CELERYBEAT_SCHEDULE = {
    # 'backend.auth_log_statistics': {
    #     'task': 'backend.auth_log_statistics',
    #     'schedule': 1,
    # },
}


# BLOOMBERG ------------------------------------------------

BLOOMBERG_SANDBOX = True
BLOOMBERG_WSDL = 'https://service.bloomberg.com/assets/dl/dlws.wsdl'
BLOOMBERG_RETRY_DELAY = 1
BLOOMBERG_MAX_RETRIES = 60
BLOOMBERG_STORAGE = {
    'BACKEND': 'django.core.files.storage.FileSystemStorage',
    'KWARGS': {
        'location': os.path.join(BASE_DIR, 'tmp', 'bloomberg'),
        'base_url': '/api/bloomberg/'
    }
}