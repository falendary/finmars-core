# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-25 09:12
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        ('auth', '0007_alter_validators_add_error_messages'),
        ('currencies', '0002_auto_20160425_0912'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccrualCalculationModel',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='system code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'accrual calculation model',
                'verbose_name_plural': 'accrual calculation models',
            },
        ),
        migrations.CreateModel(
            name='AccrualCalculationSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accrual_start_date', models.DateField(default=django.utils.timezone.now, verbose_name='accrual start date')),
                ('first_payment_date', models.DateField(default=django.utils.timezone.now, verbose_name='first payment date')),
                ('accrual_size', models.FloatField(default=0.0, verbose_name='accrual size')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
            ],
            options={
                'verbose_name': 'accrual calculation schedule',
                'verbose_name_plural': 'accrual calculation schedules',
            },
        ),
        migrations.CreateModel(
            name='CostMethod',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='system code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'cost method',
                'verbose_name_plural': 'cost methods',
            },
        ),
        migrations.CreateModel(
            name='DailyPricingModel',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='system code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'daily pricing model',
                'verbose_name_plural': 'daily pricing models',
            },
        ),
        migrations.CreateModel(
            name='EventSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('notification_date', models.DateField(blank=True, null=True, verbose_name='notification date')),
                ('effective_date', models.DateField(blank=True, null=True, verbose_name='effective date')),
            ],
            options={
                'verbose_name': 'event schedule',
                'verbose_name_plural': 'event schedules',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('price_multiplier', models.FloatField(default=1.0, verbose_name='price multiplier')),
                ('accrued_multiplier', models.FloatField(default=1.0, verbose_name='accrued multiplier')),
                ('default_price', models.FloatField(default=0.0, verbose_name='default price')),
                ('default_accrued', models.FloatField(default=0.0, verbose_name='default accrued')),
                ('accrued_currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instruments_accrued', to='currencies.Currency', verbose_name='accrued currency')),
                ('daily_pricing_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='instruments.DailyPricingModel', verbose_name='daily pricing model')),
                ('master_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instruments', to='users.MasterUser', verbose_name='master user')),
            ],
            options={
                'verbose_name': 'instrument',
                'verbose_name_plural': 'instruments',
                'permissions': [('view_instrument', 'Can view instrument')],
            },
        ),
        migrations.CreateModel(
            name='InstrumentAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_string', models.CharField(blank=True, max_length=255, null=True, verbose_name='value (String)')),
                ('value_float', models.FloatField(blank=True, null=True, verbose_name='value (Float)')),
                ('value_date', models.DateField(blank=True, null=True, verbose_name='value (Date)')),
            ],
            options={
                'verbose_name': 'instrument attribute',
                'verbose_name_plural': 'instrument attributes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentAttributeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('value_type', models.PositiveSmallIntegerField(choices=[(20, 'Number'), (10, 'String'), (40, 'Date'), (30, 'Classifier')], default=10, verbose_name='value type')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
            ],
            options={
                'verbose_name': 'instrument attribute type',
                'verbose_name_plural': 'instrument attribute types',
            },
        ),
        migrations.CreateModel(
            name='InstrumentAttributeTypeGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_object_permissions', to='instruments.InstrumentAttributeType', verbose_name='content object')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Group', verbose_name='group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instrument attribute types - group permission',
                'verbose_name_plural': 'instrument attribute types - group permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentAttributeTypeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='is hidden')),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='instruments.InstrumentAttributeType', verbose_name='attribute type')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instrument_attribute_type_options', to='users.Member', verbose_name='member')),
            ],
            options={
                'verbose_name': 'instrument attribute types - option',
                'verbose_name_plural': 'instrument attribute types - options',
            },
        ),
        migrations.CreateModel(
            name='InstrumentAttributeTypeUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_object_permissions', to='instruments.InstrumentAttributeType', verbose_name='content object')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Member', verbose_name='member')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instrument attribute types - user permission',
                'verbose_name_plural': 'instrument attribute types - user permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentClass',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='system code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'instrument class',
                'verbose_name_plural': 'instrument classes',
            },
        ),
        migrations.CreateModel(
            name='InstrumentClassifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('master_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instrument_classifiers', to='users.MasterUser', verbose_name='master user')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='instruments.InstrumentClassifier', verbose_name='parent')),
            ],
            options={
                'verbose_name': 'instrument classifier',
                'verbose_name_plural': 'instrument classifiers',
                'permissions': [('view_instrumentclassifier', 'Can view instrument classifier')],
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='InstrumentClassifierGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_object_permissions', to='instruments.InstrumentClassifier', verbose_name='content object')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Group', verbose_name='group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instrument classifiers - group permission',
                'verbose_name_plural': 'instrument classifiers - group permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentClassifierUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_object_permissions', to='instruments.InstrumentClassifier', verbose_name='content object')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Member', verbose_name='member')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instrument classifiers - user permission',
                'verbose_name_plural': 'instrument classifiers - user permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentFactorSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateField(default=django.utils.timezone.now, verbose_name='effective date')),
                ('factor_value', models.FloatField(default=0.0, verbose_name='factor value')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='factor_schedules', to='instruments.Instrument', verbose_name='instrument')),
            ],
            options={
                'verbose_name': 'instrument factor schedule',
                'verbose_name_plural': 'instrument factor schedules',
            },
        ),
        migrations.CreateModel(
            name='InstrumentGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_object_permissions', to='instruments.Instrument', verbose_name='content object')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Group', verbose_name='group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instruments - group permission',
                'verbose_name_plural': 'instruments - group permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('instrument_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instrument_types', to='instruments.InstrumentClass', verbose_name='instrument class')),
                ('master_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instrument_types', to='users.MasterUser', verbose_name='master user')),
            ],
            options={
                'verbose_name': 'instrument type',
                'verbose_name_plural': 'instrument types',
                'permissions': [('view_instrumenttype', 'Can view instrument type')],
            },
        ),
        migrations.CreateModel(
            name='InstrumentTypeGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_object_permissions', to='instruments.InstrumentType', verbose_name='content object')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Group', verbose_name='group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instrument types - group permission',
                'verbose_name_plural': 'instrument types - group permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentTypeUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_object_permissions', to='instruments.InstrumentType', verbose_name='content object')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Member', verbose_name='member')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instrument types - user permission',
                'verbose_name_plural': 'instrument types - user permissions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_object_permissions', to='instruments.Instrument', verbose_name='content object')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Member', verbose_name='member')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'instruments - user permission',
                'verbose_name_plural': 'instruments - user permissions',
            },
        ),
        migrations.CreateModel(
            name='ManualPricingFormula',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expr', models.CharField(blank=True, default='', max_length=255, verbose_name='expression')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manual_pricing_formulas', to='instruments.Instrument', verbose_name='instrument')),
            ],
            options={
                'verbose_name': 'manual pricing formula',
                'verbose_name_plural': 'manual pricing formulas',
                'permissions': [('view_manualpricingformula', 'Can view manual pricing formula')],
            },
        ),
        migrations.CreateModel(
            name='PaymentSizeDetail',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='system code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'payment size detail',
                'verbose_name_plural': 'payment size details',
            },
        ),
        migrations.CreateModel(
            name='PeriodicityPeriod',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='system code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'periodicity period',
                'verbose_name_plural': 'periodicity periods',
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='pricing policy')),
                ('principal_price', models.FloatField(default=0.0, verbose_name='principal price')),
                ('accrued_price', models.FloatField(blank=True, null=True, verbose_name='accrued price')),
                ('factor', models.FloatField(blank=True, null=True, verbose_name='factor')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='instruments.Instrument', verbose_name='instrument')),
            ],
            options={
                'verbose_name': 'price history',
                'verbose_name_plural': 'price histories',
                'permissions': [('view_pricehistory', 'Can view price history')],
            },
        ),
        migrations.CreateModel(
            name='PricingPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('expr', models.TextField(default='', verbose_name='expression')),
                ('master_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_policies', to='users.MasterUser', verbose_name='master user')),
            ],
            options={
                'verbose_name': 'pricing policy',
                'verbose_name_plural': 'pricing policies',
            },
        ),
        migrations.AddField(
            model_name='pricehistory',
            name='pricing_policy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='instruments.PricingPolicy', verbose_name='pricing policy'),
        ),
        migrations.AddField(
            model_name='manualpricingformula',
            name='pricing_policy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='manual_pricing_formulas', to='instruments.PricingPolicy', verbose_name='pricing policy'),
        ),
        migrations.AddField(
            model_name='instrumentattributetype',
            name='classifier_root',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='instruments.InstrumentClassifier', verbose_name='classifier (root)'),
        ),
        migrations.AddField(
            model_name='instrumentattributetype',
            name='master_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.MasterUser', verbose_name='master user'),
        ),
        migrations.AddField(
            model_name='instrumentattribute',
            name='attribute_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attributes', to='instruments.InstrumentAttributeType', verbose_name='attribute type'),
        ),
        migrations.AddField(
            model_name='instrumentattribute',
            name='classifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='instruments.InstrumentClassifier', verbose_name='classifier'),
        ),
        migrations.AddField(
            model_name='instrumentattribute',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='instruments.Instrument', verbose_name='content object'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='payment_size_detail',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='instruments.PaymentSizeDetail', verbose_name='payment size detail'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='pricing_currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='currencies.Currency', verbose_name='pricing currency'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='instruments.InstrumentType', verbose_name='type'),
        ),
    ]
